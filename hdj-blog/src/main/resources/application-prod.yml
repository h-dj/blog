server:
  port: 8181
  servlet:
    context-path: /
  tomcat:
    uri-encoding: UTF-8
    max-threads: 1000
    min-spare-threads: 3
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    # 初始化Druid
    druid:
      # mysql数据库接地址
      url: ${BLOG-MYSQL-URL}
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: blog
      password: 'mpw:iWqMvsaC90f/xzaHeRWj/A=='
      # 监控页面的用户名和密码 以及页面地址
      stat-view-servlet:
        enabled: false
        # 初始化连接大小   默认：0
      initial-size: 5
      # 最小空闲连接数 默认：0
      min-idle: 0
      # 最大连接数  默认：8
      max-active: 20
      # 获取连接等待超时的时间(毫秒) 默认：-1
      max-wait: 6000
      # 查询超时时间(秒)
      query-timeout: 90
      # 用来检测连接是否有效的sql，要求是一个查询语句
      validation-query: SELECT 1 FROM DUAL
      # 申请连接时检测连接可用性 默认：false
      test-on-borrow: false
      # 归还连接检测 默认：false
      test-on-return: false
      # 超时是否检测连接可用性
      test-while-idle: true
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接 (毫秒)
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间(毫秒，默认30分钟)
      min-evictable-idle-time-millis: 300000
      # 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat；日志用的filter:log4j；防御sql注入的filter:wall
      filters: stat,wall,slf4j
      # 慢SQL记录 https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter
      filter:
        stat:
          log-slow-sql: true
          slow-sql-millis: 2000
          db-type: mysql
          # SQL合并 默认：false
          merge-sql: false
        wall:
          config:
            multi-statement-allow: true
          #            delete-allow: true
          #            drop-table-allow: false
          enabled: true
          db-type: mysql
      # 是否缓存PreparedStatement. PSCache对支持游标的数据库性能提升巨大，比如说oracle.在mysql下建议关闭.
      pool-prepared-statements: false
      # 每个连接上PSCache的大小
      max-pool-prepared-statement-per-connection-size: 20
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
  redis:
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器地址
    host: ${BLOG-REDIS-HOST}
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）如果没有配置密码就不要写这个属性了
    password: 'mpw:1mrZFYXZGnTXck8sloalZw=='
    #连接池
    lettuce:
      pool:
        #连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 6000
        #连接池中的最大空闲连接
        max-idle: 8
        #连接池中的最小空闲连接
        min-idle: 0
    #连接超时时间（毫秒）
    timeout: 6000
  # 开启 multipart 上传功能
  servlet:
    multipart:
      #开启文件上传
      enabled: true
      # 文件写入磁盘的阈值
      file-size-threshold: 1KB
      # 最大文件大小
      max-file-size: 10MB
      # 最大请求大小
      max-request-size: 10MB
  rabbitmq:
    host: ${BLOG-MQ-HOST}
    port: 5672
    username: 'mpw:0MvsM2m01mYpDwcOZGei8g=='
    password: 'mpw:on6I6I1B0wkBiFJhDMSHJA=='
    #虚拟主机地址
    virtual-host: /blog
    #连接超时时间
    connection-timeout: 15000
    publisher-confirms: true
    publisher-returns: true
    template:
      mandatory: true
    #消费端配置
    listener:
      simple:
        #消费端
        concurrency: 2
        #最大消费端数
        max-concurrency: 2
        #自动签收auto  手动 manual
        acknowledge-mode: manual
        #限流（海量数据，同时只能过来一条）
        prefetch: 1
  elasticsearch:
    rest:
      uris:
        - ${BLOG-ES-HOSTS}
      connection-timeout: 2000
      read-timeout: 60000
logging:
  path: 'logs'
blog:
  cors-allowed-origins:
    - "*"
  #禁用swagger
  swagger-enabled: false
  # 定义文件上传的路径
  file-upload-dir: /tmp/upload/
  # 文件访问路径
  file-base-url: /upload/
