pipeline {
    agent any
    parameters {
      //参数化
      string  name: 'PROJECT_PROFILE', description: '项目的profile', defaultValue: 'dev'
    }
    environment {
       GIT_CREDENTIALS_ID = 'git-gogs-rpi'
       GIT_BRANCH = 'develop'
       GIT_URL = 'http://192.168.43.178:10080/hdj/blog.git'
       MAVEN_CONFIG = 'ba0feaaf-9ef0-4ce5-98c4-2dc0d34647c9'
       SSH_AGENT_CREDENTIALS = ''
       DOCKER_REGISTER= 'http://127.0.0.1:6000'
       DOCKER_REGISTER_CREDENTIALS_ID= ''
       DOCKER_TAG = "hdj/hdj-blog:v1.0.1-dev"
       REMOTE_HOST = "blog@139.159.150.1"
       REMOTE_PORT = "22022"
    }
    stages {
        stage('拉取代码') {
            steps {
                 echo "拉去分支 $GIT_BRANCH 代码"
                 git branch: "$GIT_BRANCH", credentialsId: "$GIT_CREDENTIALS_ID", url: "$GIT_URL"
            }
        }
        stage('打包') {
           steps {
                 withMaven(
                     //指定mavne 版本
                     maven: "maven3",
                     // 仓库位置
                     mavenLocalRepo: '${WORKSPACE}/.m2',
                     //settings.xml配置，全局定义的名称
                     mavenSettingsConfig: "$MAVEN_CONFIG"
                 ){
                    dir("${WORKSPACE}/hdj-blog"){
                        echo "maven 打包"
                        sh "mvn clean package -P $PROJECT_PROFILE"
                        sh "ls -l ./target"
                    }
                 }
            }
        }
        stage('构建镜像') {
             steps {
              script{
                  dir("${WORKSPACE}/hdj-blog"){
                        docker.withRegistry("$DOCKER_REGISTER", "$DOCKER_REGISTER_CREDENTIALS_ID") {
                              sh 'docker image prune --filter="dangling=true" -f'
                              sh """
                                    docker buildx build -t blog-api:v1.0.1-dev -f Dockerfile.arm64  --platform=linux/arm64 -o type=docker .
                                    #docker buildx build -t blog-api:v1.0.1-dev -f Dockerfile  --platform=linux/amd64 -o type=docker .
                                    docker push $DOCKER_TAG
                              """
                       }
                    }
                  }
            }
       }
       stage('启动项目') {
            steps {
              sshagent (credentials: ["$SSH_AGENT_CREDENTIALS"]) {
                  sh 'ssh -o StrictHostKeyChecking=no -p $REMOTE_PORT $REMOTE_HOST "time docker-compose -f docker-compose.yml up -d --build"'
              }
           }
       }
    }
}

